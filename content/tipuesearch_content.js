var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:\xa0 fqpabi8 \n 個人倉儲: https://github.com/41323231/cp2024_hw \n 個人網站: https://41323231.github.io/cp2024_hw \n \n \n \n \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'References', 'text': '其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'References.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n \n \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w10', 'text': "\n \n \n 這兩個影片分別都用五個不同的環境做同樣的是兩部影片唯一不同的是違反變數名導致無法執行。 \n \n 題讓我知道原來Brython也解題也是這題讓我更熟悉利用一些環境來操作這些程式。 \n \n 隞乩�𧢲䲮蝔见�誩�堒㫲�繧�鍂  Mathjax Version 3 �聢撘� . \n \n set1 - Physics \n Use python to solve the problem: A jet touches down at velocity 310 km/h. Find the constant acceleration required to stop the aircraft 1000 m down the runway. \n To solve this problem, we'll use the kinematic equations of motion under constant acceleration. The question asks for the constant acceleration required to stop the jet after a certain distance, which means we are looking for the deceleration. \n Step 1: Problem Breakdown \n We are given: - Initial velocity \\( v_0 = 310 \\, \\text{km/h} \\) - Final velocity \\( v = 0 \\, \\text{m/s} \\) (since the jet stops) - Distance \\( d = 1000 \\, \\text{m}... \n \n", 'tags': '', 'url': 'w10.html'}, {'title': 'Brython建立', 'text': '\n \n', 'tags': '', 'url': 'Brython建立.html'}, {'title': 'w11_hw', 'text': '以下影片說明如何利用近端可攜系統維護個人作業網站: \n \n \n \n \n \n 1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題解答: "*"字號圓型 \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 第二題解答: 網頁上的方格與塗色 \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n 解題過程在上面的影片上。 \n 心得:這幾個題目讓我知道Brython如何變出形狀,而且解如部會打程式還能使用chatgpt來解,也讓我知道給AI下指令沒有那麼簡單,讓我知道我還有很多要學習 。 \n 十月二十七號 \n 第一題: 數對排列 \n 第二題: 網格狀圖形 \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \nctx = canvas.getContext("2d")\nctx.lineWidth = 1  # 設定線條寬度\nctx.strokeStyle = \'red\'  # 設定線條顏色為紅色\n \n# 1. 原始正方形 (左上角在 (0, 0))\nctx.beginPath()\nctx.rect(0, 0, 200, 200)  # 原始正方形的大小\nctx.stroke()\n \n# 設定變數\ncanvas_center_x = canvas.width // 2\ncanvas_center_y = canvas.height // 2\nsquare_size = 200\n \n# 2. 第二個正方形 (中心對齊)\nfirst_top_left_x = canvas_center_x - square_size // 2\nfirst_top_left_y = canvas_center_y - square_size // 2\n \nctx.beginPath()\nctx.rect(first_top_left_x, first_top_left_y, square_size, square_size)\nctx.stroke()\n \n# 3. 第三個正方形 (左上角在中心)\nsecond_top_left_x = canvas_center_x - square_size // 2\nsecond_top_left_y = canvas_center_y - square_size // 2\n \nctx.beginPath()\nctx.rect(second_top_left_x, second_top_left_y, square_size, square_size)\nctx.stroke() \n W13', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w13_hw', 'text': '這是兩個正方形相交 \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \nctx = canvas.getContext("2d")\nctx.lineWidth = 1  # 設定線條寬度\nctx.strokeStyle = \'red\'  # 設定線條顏色為紅色\n \n# 1. 原始正方形 (左上角在 (0, 0))\nctx.beginPath()\nctx.rect(0, 0, 200, 200)  # 原始正方形的大小\nctx.stroke()\n \n# 設定變數\ncanvas_center_x = canvas.width // 2\ncanvas_center_y = canvas.height // 2\nsquare_size = 200\n \n# 2. 第二個正方形 (中心對齊)\nfirst_top_left_x = canvas_center_x - square_size // 2\nfirst_top_left_y = canvas_center_y - square_size // 2\n \nctx.beginPath()\nctx.rect(first_top_left_x, first_top_left_y, square_size, square_size)\nctx.stroke()\n \n# 3. 第三個正方形 (左上角在中心)\nsecond_top_left_x = canvas_center_x - square_size // 2\nsecond_top_left_y = canvas_center_y - square_size // 2\n \nctx.beginPath()\nctx.rect(second_top_left_x, second_top_left_y, square_size, square_size)\nctx.stroke() \n 這是多兩個圓並塗色 \n from browser import html\nfrom browser import document as doc\nimport math\n \ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \nctx = canvas.getContext("2d")\nctx.lineWidth = 4\n\n#混色的\nctx.globalCompositeOperation = "lighter"\n\n\n#黑邊圓*2(每個畫四個邊邊)\nctx.strokeStyle = \'black\'\n#第一個圓\nctx.beginPath()\nctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)\nctx.fillStyle = "MistyRose"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)\nctx.fillStyle = "OliveDrab"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)\nctx.fillStyle = "Teal"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)\nctx.fillStyle = "Fuchsia"\nctx.fill()\nctx.stroke()\n\n#第二個圓\nctx.beginPath()\nctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)\nctx.fillStyle = "red"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)\nctx.fillStyle = "Black"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)\nctx.fillStyle = "Lightred"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)\nctx.fillStyle = "blue"\nctx.fill()\nctx.stroke()\n\n\n#紅方形*2(4個三角形)\nctx.strokeStyle = \'blue\'\nctx.beginPath()\nctx.moveTo(60,60)\nctx.lineTo(60,260)\nctx.lineTo(260,260)\nctx.fillStyle = "brown"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(60,60)\nctx.lineTo(260,60)\nctx.lineTo(260,260)\nctx.fillStyle = "red"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(360,160)\nctx.lineTo(360,360)\nctx.fillStyle = "purple"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(160,360)\nctx.lineTo(360,360)\nctx.fillStyle = "yellow"\nctx.fill()\nctx.stroke()\n\n \n#重疊的小方型\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(160,260)\nctx.lineTo(260,260)\nctx.fillStyle = "grey"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(260,160)\nctx.lineTo(260,260)\nctx.fillStyle = "green"\nctx.fill()\nctx.stroke()\n\n\n#籃斜線\nctx.strokeStyle = \'pink\'\nctx.beginPath() \nctx.moveTo(60, 60)\nctx.lineTo(360, 360)\nctx.stroke() \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w12_hw', 'text': '第一題 \n 1-1: 解 \n 解釋語法: \n \n 程式會顯示「請輸入你的名字：」。 \n 你輸入名字後，程式會說「你好, [你的名字]」。 \n \n 簡單來說， input()  就是讓程式可以問你問題並拿到你的答案。 \n # 問用戶名字\nname = input("請輸入你的名字：")\n# 顯示用戶的名字\nprint("你好, " + name)\n \n 1-2: 解 \n 解釋語法: \n print()  讓程式將文字或數據顯示出來，讓你知道程式正在做什麼或顯示結果。 \n print (" /\\_/\\   ")\nprint (" >^.^<   ")\nprint ("  / \\    ")\nprint (" (___)___") \n 第二題 \n 2: 解 \n 解釋語法: \n 前兩句是寫出變數，後兩句是分別列印變數。 \n first_name = "Matt"\nlast_name  = "Shu"\nprint (first_name)\nprint (last_name) \n 第三題 \n 3: 解 \n 解釋語法: \n 1.在programming_book設三個變數。 \n 2.列印programming_book變數。 \n 3.在設一個wanted_book的變數相當於input()的效果。 \n 4.列印wanted_book變數。 \n 5.會回傳變數如果有在programming_book裡的變數會顯示是我們有賣，反之是寫抱歉我們沒有賣。 \n programming_books = ["Learn python", "Python for all",  "Intro to python"]\nprint (programming_books)\nwanted_book = input("Hi! What book would you like to buy?")\nprint (wanted_book)\nif wanted_book in programming_books:\n    print ("Yes, we sell it!")\nelse:\n    print ("Sorry, we don\'t sell that book") \n 4. 解 \n 解釋語法: \n 1.在shopping_list設三個變數。 \n 2.列印shopping_list變數。 \n 3.再設一個new_item的變數相當於input()的效果。 \n 4.毀回傳變數如果有再shopping_list裡會列出購物清單，反之不會。 \n 5.阿item_to_remove是想移除物品。 \n 6.如果移除物品是在清單會說移除清單，反之會寫不在清單。 \n shopping_list = ["carrots", "chocolate", "olives"]\nprint (shopping_list)\nnew_item = input("What else do I have to buy?")\n\nif new_item in shopping_list:\n    print (new_item + " is/are already in the shopping list")\n    print (shopping_list) \nelse:\n    shopping_list.append(new_item)\n    print (shopping_list)\n    item_to_remove = input("What do I have to remove?")\n\nif item_to_remove in shopping_list:\n    shopping_list.remove(item_to_remove)\n    print (shopping_list)\nelse:\n    print (item_to_remove + " is/are not in the list")\n    print (shopping_list) \n 第五題 \n 5. 解 \n 解釋語法: \n 1.todays_menu是變數。 \n 2.第二句是從今日菜單找半數排列第幾而第三句是列印菜單。 \n 3.第四句是移除回報變數中的選項第五句是列印出來。 \n 4.最後是把今日菜單多家入選項並列印出來。 \n todays_menu = [ "burger","salad" ,"coke"]\nside_dish_index = todays_menu.index("salad")\nprint (side_dish_index)\ntodays_menu.pop(side_dish_index)\nprint (todays_menu)\ntodays_menu.insert(side_dish_index, "fries")\nprint (todays_menu) \n 第六題 \n 6. 解 \n cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]\nprint(cities)              # 印出整個列表\nprint(cities[1])           # 印出索引為1的元素 (Prague)\nprint(cities[1:4])         # 印出索引1到3的元素 [\'Prague\', \'Cape Town\', \'Tokyo\']\nprint(cities[1:4:2])       # 印出索引1到3之間，步長為2的元素 [\'Prague\', \'Tokyo\']\nprint(cities[0:3])         # 印出索引0到2的元素 [\'San Diego\', \'Prague\', \'Cape Town\']\nprint(cities[:3])          # 印出索引0到2的元素，省略start相當於從0開始 [\'San Diego\', \'Prague\', \'Cape Town\']\nprint(cities[2:5])         # 印出索引2到4的元素 [\'Cape Town\', \'Tokyo\', \'Melbourne\']\nprint(cities[2:])          # 印出索引2到最後的所有元素 [\'Cape Town\', \'Tokyo\', \'Melbourne\']\nprint(cities[0:5:2])       # 印出索引0到4，步長為2的元素 [\'San Diego\', \'Cape Town\', \'Melbourne\']\nprint(cities[::2])         # 印出步長為2的元素 [\'San Diego\', \'Cape Town\', \'Melbourne\']\nprint(cities[4])           # 印出索引4的元素 (Melbourne)\nprint(cities[-1])          # 印出最後一個元素 (Melbourne)\nprint(cities[-4:-1])       # 印出倒數第4到倒數第2的元素 [\'Prague\', \'Cape Town\', \'Tokyo\']\nprint(cities[3:0:-1])      # 印出從索引3到索引1的元素，步長為-1 [\'Tokyo\', \'Cape Town\', \'Prague\']\nprint(cities[-2:-5:-1])    # 印出倒數第2到倒數第5的元素，步長為-1 [\'Tokyo\', \'Cape Town\', \'Prague\']\nprint(cities[::-1])        # 印出整個列表反轉 [\'Melbourne\', \'Tokyo\', \'Cape Town\', \'Prague\', \'San Diego\']\n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w15', 'text': '從1累加到100 \n # sum 初始值設為 0\nsum = 0\ninit = 1\nupto = 100\n# 利用 for 重複迴圈與變數加法進行累加\nfor i in range(init, upto+1):\n    sum = sum + i\nprint("從" + str(init) + "累加到" + str(upto) + "=" + str(sum)) \n addto \n # 定義 addto 函式\ndef addto(init, upto):\n    # 初始化 sum 為 0\n    sum = 0\n    # 利用 for 迴圈進行累加\n    for i in range(init, upto + 1):\n        sum = sum + i\n    return sum\n \n# 主程式\ninit = 1\nupto = 100\n# 呼叫 addto 函式\nresult = addto(init, upto)\nprint("從" + str(init) + "累加到" + str(upto) + "=" + str(result)) \n \xa0 add_only_even\xa0 \n def addto(init, upto):\n    # 初始化 sum 為 0\n    sum = 0\n    # 利用 for 迴圈進行累加，只累加偶數\n    for i in range(init, upto + 1):\n        if i % 2 == 0:  # 如果 i 是偶數\n            sum = sum + i\n    return sum\n\n# 主程式\ninit = 1\nupto = 100\n# 呼叫 addto 函式\nresult = addto(init, upto)\nprint("從" + str(init) + "累加到" + str(upto) + "的偶數總和是: " + str(result)) \n add_avoid_8 \n def add_avoid_8(init, upto):\n    # 初始化 sum 為 0\n    sum = 0\n    # 利用 for 迴圈進行累加\n    for i in range(init, upto + 1):\n        # 檢查數字是否包含 \'8\'\n        if \'8\' not in str(i):  # 如果 i 不包含 \'8\'\n            sum += i  # 累加該數字\n    return sum\n\n# 主程式\ninit = 1\nupto = 100\n# 呼叫 add_avoid_8 函式\nresult = add_avoid_8(init, upto)\nprint(f"從{init}累加到{upto}的總和，避開包含\'8\'的數字是: {result}")\n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '圖形 \n from browser import document, html\nimport math\n \n# 初始化 HTML，確保 canvas 元素存在\ndef setup_canvas():\n    if not document.querySelector("#my_canvas"):\n        canvas = html.CANVAS(id="my_canvas", width=800, height=600)\n        document <= canvas\n \nsetup_canvas()\n\n# Set up canvas\ncanvas = document["my_canvas"]\nctx = canvas.getContext("2d")\n\n# Set origin (32, 31)\norigin_x, origin_y = 32, 31    #自己學號 修改\n\n# Draw X-axis\nctx.beginPath()\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(500, origin_y)\nctx.strokeStyle = "black"\nctx.lineWidth = 2\nctx.stroke()\n\n# Draw Y-axis\nctx.beginPath()\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(origin_x, 300)\nctx.stroke()\n\n# Label origin\nctx.font = "12px Arial"\nctx.fillStyle = "black"\nctx.fillText("(32, 31)", origin_x + 5, origin_y - 5)\n\n# Draw shapes\n# Adjusted placement to fix alignment issue\n\n# Hexagon (Orange)\nhex_x, hex_y = 100, 100\nctx.beginPath()\nfor i in range(6):\n    angle = i * (2 * math.pi / 6)\n    x = hex_x + 30 * math.cos(angle)\n    y = hex_y + 30 * math.sin(angle)\n    if i == 0:\n        ctx.moveTo(x, y)\n    else:\n        ctx.lineTo(x, y)\nctx.closePath()\nctx.fillStyle = "orange"\nctx.fill()\n\n# Diamond (Teal)\nctx.beginPath()\nctx.moveTo(160, 70)\nctx.lineTo(180, 100)\nctx.lineTo(160, 130)\nctx.lineTo(140, 100)\nctx.closePath()\nctx.fillStyle = "teal"\nctx.fill()\n\n# Triangle (Teal)\nctx.beginPath()\nctx.moveTo(165, 130)\nctx.lineTo(205, 130)\nctx.lineTo(185, 100)\nctx.closePath()\nctx.fillStyle = "blue"\nctx.fill()\n\n# Circle (Pink)\nctx.beginPath()\nctx.arc(230, 100, 30, 0, 2 * math.pi)\nctx.fillStyle = "pink"\nctx.fill()\n\n# Square (Yellow)\nctx.beginPath()\nctx.rect(265, 75, 50, 50)\nctx.fillStyle = "yellow"\nctx.fill()\n\n# Rectangle (Blue)\nctx.beginPath()\nctx.rect(320, 90, 60, 20)\nctx.fillStyle = "Blue"\nctx.fill() \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w7', 'text': '今天使用help_range.py寫\'勝讓數字能夠排列 \n 還寫出下列程式把數字排成金字塔 \n n=10 \n for i in range(n):    print(" " * (n - i - 1), end="")    for j in range(1, i + 2):  print(j, end=" ")  print() \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8', 'text': '操作步驟: \n \n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n \n \n 圖形 \n from browser import html\nfrom browser import document as doc\nimport math\n\n\ndef draw_maze(angle_degrees):\n    # 创建和添加画布\n    canvas = html.CANVAS(width=1200, height=1200)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n\n    # 获取绘图上下文\n    ctx = canvas.getContext("2d")\n\n    # 设置绘图参数\n    pixel_scale = 100\n    offset_x = 32 * 2\n    offset_y = 31 * 2\n    # 整体向右移动的偏移量\n    move_right_offset = 200\n    angle_radians = math.radians(angle_degrees)\n\n    # 定义迷宫线条\n    lines = [\n        ((0, 0), (1, 0)),\n        ((2, 0), (5, 0)),\n        ((5, 0), (5, 5)),\n        ((3, 5), (5, 5)),\n        ((4, 5), (4, 3)),\n        ((2, 3), (4, 3)),\n        ((1, 3), (1, 5)),\n        ((3, 3), (3, 2)),\n        ((0, 0), (0, 5)),\n        ((0, 5), (2, 5)),\n        ((2, 5), (2, 4)),\n        ((2, 4), (3, 4)),\n        ((0, 2), (1, 2)),\n        ((2, 2), (2, 1)),\n        ((0, 1), (4, 1)),\n        ((4, 1), (4, 2)),\n    ]\n\n    # 旋转并绘制迷宫线条\n    ctx.strokeStyle = "blue"\n    ctx.lineWidth = 2\n    for line in lines:\n        start = line[0]\n        end = line[1]\n\n        # 旋转起点坐标\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        # 旋转终点坐标\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + move_right_offset + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + move_right_offset + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n\n    return ctx, offset_x + move_right_offset, offset_y\n\n\ndef label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):\n    text_angle_radians = math.radians(text_angle_degrees)\n    ctx.font = "18px Arial"\n    ctx.fillStyle = "red"\n    # 原始文本位置\n    original_x = offset_x + 10\n    original_y = offset_y - 15\n    # 旋转后的文本位置\n    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)\n    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)\n    ctx.save()\n    ctx.translate(offset_x, offset_y)\n    ctx.rotate(text_angle_radians)\n    ctx.fillText("(32, 31)", 10, - 15)\n    ctx.restore()\n\n\nif __name__ == "__main__":\n    # 调整迷宫角度，这里设置为30度，可以根据需要修改\n    maze_angle = 0\n    # 文本角度\n    text_angle = 0\n    ctx, offset_x, offset_y = draw_maze(maze_angle)\n    label_coordinate(ctx, offset_x, offset_y, text_angle) \n 123', 'tags': '', 'url': 'w8.html'}, {'title': 'w16_exam2', 'text': '圖形 \n from browser import html\nfrom browser import document as doc\nimport math\n\n\ndef draw_maze(angle_degrees):\n    # 创建和添加画布\n    canvas = html.CANVAS(width=1200, height=1200)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n\n    # 获取绘图上下文\n    ctx = canvas.getContext("2d")\n\n    # 设置绘图参数\n    pixel_scale = 100\n    offset_x = 32 * 2\n    offset_y = 31 * 2\n    # 整体向右移动的偏移量\n    move_right_offset = 200\n    angle_radians = math.radians(angle_degrees)\n\n    # 定义迷宫线条\n    lines = [\n        ((0, 0), (1, 0)),\n        ((2, 0), (5, 0)),\n        ((5, 0), (5, 5)),\n        ((3, 5), (5, 5)),\n        ((4, 5), (4, 3)),\n        ((2, 3), (4, 3)),\n        ((1, 3), (1, 5)),\n        ((3, 3), (3, 2)),\n        ((0, 0), (0, 5)),\n        ((0, 5), (2, 5)),\n        ((2, 5), (2, 4)),\n        ((2, 4), (3, 4)),\n        ((0, 2), (1, 2)),\n        ((2, 2), (2, 1)),\n        ((0, 1), (4, 1)),\n        ((4, 1), (4, 2)),\n    ]\n\n    # 旋转并绘制迷宫线条\n    ctx.strokeStyle = "blue"\n    ctx.lineWidth = 2\n    for line in lines:\n        start = line[0]\n        end = line[1]\n\n        # 旋转起点坐标\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        # 旋转终点坐标\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + move_right_offset + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + move_right_offset + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n\n    return ctx, offset_x + move_right_offset, offset_y\n\n\ndef label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):\n    text_angle_radians = math.radians(text_angle_degrees)\n    ctx.font = "18px Arial"\n    ctx.fillStyle = "red"\n    # 原始文本位置\n    original_x = offset_x + 10\n    original_y = offset_y - 15\n    # 旋转后的文本位置\n    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)\n    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)\n    ctx.save()\n    ctx.translate(offset_x, offset_y)\n    ctx.rotate(text_angle_radians)\n    ctx.fillText("(32, 31)", 10, - 15)\n    ctx.restore()\n\n\nif __name__ == "__main__":\n    # 调整迷宫角度，这里设置为30度，可以根据需要修改\n    maze_angle = 0\n    # 文本角度\n    text_angle = 0\n    ctx, offset_x, offset_y = draw_maze(maze_angle)\n    label_coordinate(ctx, offset_x, offset_y, text_angle) \n \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n w16_exam2', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};